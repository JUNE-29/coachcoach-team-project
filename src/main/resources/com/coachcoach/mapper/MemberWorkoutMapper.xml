<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.coachcoach.dao.MemberWorkoutDao">

 <resultMap type="MemberWorkout" id="MemberWorkoutMap">
    <id column="workout_list_no"     property="workoutListNo"/>
    <result column="member_no"       property="memberNo"/>
    <result column="workout_date"    property="workoutDate"/>
    <result column="weight"          property="weight"    />
    <result column="walk_count"  property="walkCount"/>
    
    <association property="member" javaType="Member">
      <id column="member_no"              property="no"/>
    </association>
    
     <collection property="workoutUnit" ofType="WorkoutUnit">
        <result column="workout_no"    property="workoutNo"/>
		    <result column="unit"          property="unit"/>
		    <result column="name"          property="name"/>
     </collection> 
   
</resultMap>

  
   <insert id="insert" parameterType="MemberWorkout"
   useGeneratedKeys="true" keyColumn="workout_list_no" keyProperty="workoutListNo">
    insert into member_workouts(
      member_no,
      workout_date,
      weight,
      walk_count
      ) values(
      #{memberNo},
      #{workoutDate},
      #{weight},      
      #{walkCount}
     )
  </insert>
  
  <!-- 운동내역리스트 -->
  <select id="findAll" resultMap="MemberWorkoutMap" parameterType="int">
    select
      m.workout_list_no,
      m.member_no,
      m.workout_date,
      m.weight,
      m.walk_count,
      wu.workout_no,
      wo.name
    from
      member_workouts m
      join members mb on m.member_no=mb.member_no
      join workout_unit wu on m.workout_list_no=wu.workout_list_no
      left outer join workout wo on wo.workout_no=wu.workout_no
    where
      m.member_no=#{memberNo}
    order by workout_list_no desc
  </select>

  <select id="findWalkWeek" resultMap="MemberWorkoutMap" parameterType="int">
    select
      coalesce(SUM(t1.walk_count+t2.walk_count), 0) AS walk_count
    from
    (
     select DATE_FORMAT(a.Date,'%Y/%m/%d') as workout_date,
     '0' AS walk_count
      from (
	      select DATE_ADD(CURDATE(), INTERVAL(7 - DAYOFWEEK(CURDATE())) DAY) - INTERVAL (a.a + (10 * b.a) + (100 * c.a)) DAY as Date
	      from (select 0 as a union all select 1 union all select 2 union all select 3 union all select 4 union all select 5 union all select 6 union all select 7 union all select 8 union all select 9) as a
	      cross join (select 0 as a union all select 1 union all select 2 union all select 3 union all select 4 union all select 5 union all select 6 union all select 7 union all select 8 union all select 9) as b
	      cross join (select 0 as a union all select 1 union all select 2 union all select 3 union all select 4 union all select 5 union all select 6 union all select 7 union all select 8 union all select 9) as c
	    ) a
	    where a.Date BETWEEN DATE_ADD(CURDATE(), INTERVAL(7 - DAYOFWEEK(CURDATE())) DAY) - INTERVAL 6 DAY AND DATE_ADD(CURDATE(), INTERVAL(7 - DAYOFWEEK(CURDATE())) DAY)
    )t1
    left join
    (
    SELECT DATE_FORMAT(workout_date,'%Y/%m/%d') AS workout_date, 
	    walk_count AS walk_count
	    FROM member_workouts
    WHERE workout_date >= DATE_SUB(DATE( DATE_ADD(CURDATE(), INTERVAL(7 - DAYOFWEEK(CURDATE())) DAY)), INTERVAL 1 WEEK)
    AND member_no=#{no}
    GROUP BY DAY(workout_date) desc
    )t2
	  on t2.workout_date = t1.workout_date
	  group by DAY(t1.workout_date)
	  ORDER BY t1.workout_date asc
  </select>
    
  <select id="findWalkMonth" resultMap="MemberWorkoutMap" parameterType="int">
		select
      coalesce(sum(t2.walk_count+t1.walk_count)/7, 0) AS walk_count
    from
    (
     select DATE_FORMAT(a.Date,'%Y/%m/%d') as workout_date,
     '0' AS walk_count
      from (
        select DATE_ADD(CURDATE(), INTERVAL(7 - DAYOFWEEK(CURDATE())) DAY) - INTERVAL (a.a + (10 * b.a) + (100 * c.a)) DAY as Date
        from (select 0 as a union all select 1 union all select 2 union all select 3 union all select 4 union all select 5 union all select 6 union all select 7 union all select 8 union all select 9) as a
        cross join (select 0 as a union all select 1 union all select 2 union all select 3 union all select 4 union all select 5 union all select 6 union all select 7 union all select 8 union all select 9) as b
        cross join (select 0 as a union all select 1 union all select 2 union all select 3 union all select 4 union all select 5 union all select 6 union all select 7 union all select 8 union all select 9) as c
      ) a
      where a.Date BETWEEN DATE_ADD(CURDATE(), INTERVAL(7 - DAYOFWEEK(CURDATE())) DAY) - INTERVAL 27 DAY AND DATE_ADD(CURDATE(), INTERVAL(7 - DAYOFWEEK(CURDATE())) DAY)
    )t1
    left join
    (
    SELECT DATE_FORMAT(workout_date,'%Y/%m/%d') AS workout_date, 
      walk_count AS walk_count
      FROM member_workouts
    WHERE workout_date>= DATE_SUB(DATE( DATE_ADD(CURDATE(), INTERVAL(7 - DAYOFWEEK(CURDATE())) DAY)), INTERVAL 4 WEEK)
    AND member_no=#{no}
    GROUP BY DAY(workout_date) desc
    )t2
    on t2.workout_date = t1.workout_date
    group by WEEK(t1.workout_date)
    order by t1.workout_date asc
  </select>
  
   <select id="findWalkYear" resultMap="MemberWorkoutMap" parameterType="int">
    select
      coalesce(sum(t2.walk_count+t1.walk_count)/30, 0) AS walk_count
    from
    (
      select DATE_FORMAT(a.Date, "%m") as month,
		  DATE_FORMAT(a.Date, "%Y/%m/%d") as md,
		  '0' as  walk_count
		  from (
		    select STR_TO_DATE(CONCAT(YEAR(CURDATE()), "/12/31"), "%Y/%m/%d") - INTERVAL (a.a + (10 * b.a) + (100 * c.a)) DAY as Date
		    from (select 0 as a union all select 1 union all select 2 union all select 3 union all select 4 union all select 5 union all select 6 union all select 7 union all select 8 union all select 9) as a
		    cross join (select 0 as a union all select 1 union all select 2 union all select 3 union all select 4 union all select 5 union all select 6 union all select 7 union all select 8 union all select 9) as b
		    cross join (select 0 as a union all select 1 union all select 2 union all select 3 union all select 4 union all select 5 union all select 6 union all select 7 union all select 8 union all select 9) as c
		  ) a
		  where a.Date BETWEEN STR_TO_DATE(CONCAT(YEAR(CURDATE()), "/01/01"), "%Y/%m/%d") AND Date_add(STR_TO_DATE(CONCAT(YEAR(CURDATE()), "/12/31"), "%Y/%m/%d"), interval 1 day) 
		  group by md
    )t1
    left join
    (
    SELECT 
      SUM(walk_count) as walk_count,
      DATE_FORMAT(workout_date, "%Y/%m/%d") as md
		FROM member_workouts
		where workout_date >= Date_add(Now(),interval - 12 month)
		AND member_no=#{no}
		GROUP BY md desc
    )t2
    on t2.md = t1.md 
		group by MONTH(t1.md)
		order by t1.md asc
  </select>
  
  <select id="findWeightYear" resultMap="MemberWorkoutMap" parameterType="int">
    select
      m.workout_date,
      m.weight
    from
      member_workouts m
    where
      m.member_no=#{no}
    GROUP BY m.workout_date
    ORDER BY m.workout_date asc
  </select>
  
  <select id="findDayWorkout" resultMap="MemberWorkoutMap" parameterType="int">
    select
      sum(wu.unit) as unit,
      w.name
    from
      member_workouts m
      join workout_unit wu on m.workout_list_no = wu.workout_list_no
      join workout w on w.workout_no = wu.workout_no
    where
      m.member_no=#{no}
      AND m.workout_date = curdate()
    GROUP BY w.name
    ORDER BY w.name asc
  </select>
  
  <select id="findWeekWorkout" resultMap="MemberWorkoutMap" parameterType="int">
    select
      sum(wu.unit) as unit,
      w.name
    from
      member_workouts m
      join workout_unit wu on m.workout_list_no = wu.workout_list_no
      join workout w on w.workout_no = wu.workout_no
    where
      m.member_no=#{no}
    AND workout_date BETWEEN DATE_ADD(CURDATE(), INTERVAL(7 - DAYOFWEEK(CURDATE())) DAY) - INTERVAL 27 DAY AND DATE_ADD(CURDATE(), INTERVAL(7 - DAYOFWEEK(CURDATE())) DAY)
    GROUP BY w.name
    ORDER BY w.name asc
  </select>
  
  <select id="findMonthWorkout" resultMap="MemberWorkoutMap" parameterType="int">
    select
      sum(wu.unit) as unit,
      w.name
    from
      member_workouts m
      join workout_unit wu on m.workout_list_no = wu.workout_list_no
      join workout w on w.workout_no = wu.workout_no
    where
      m.member_no=#{no}
    AND m.workout_date >= STR_TO_DATE(CONCAT(YEAR(CURDATE()), "/01/01"), "%Y/%m/%d")
    GROUP BY w.name
    ORDER BY w.name asc
  </select>
    
    <!-- 운동내역리스트 -->
  <select id="findByNo" resultMap="MemberWorkoutMap" parameterType="int">
    select
      m.workout_list_no,
      m.member_no,
      m.workout_date,
      m.weight,
      m.walk_count
    from
      member_workouts m
      left outer join members mb on m.member_no=mb.member_no
    where
      m.workout_list_no=#{no}
  </select>
  
  <update id="update" parameterType="MemberWorkout">
    update member_workouts
    <set>
      <if test="weight != null and weight != ''">weight=#{weight},</if> 
      <if test="walkCount != null and walkCount != ''">walkCount=#{walkCount},</if> 
    </set>
      where 
        workout_list_no=#{workoutListNo}
  </update>
  
   <delete id="delete" parameterType="int">
    delete from member_workouts
    where workout_list_no=#{workoutListNo}
  </delete>
  
  
  
</mapper>







